#ifndef MAPPERFUNCTOR_H
#define MAPPERFUNCTOR_H
#include <openbabel/isomorphism.h>
#include <openbabel/graphsym.h>

using namespace OpenBabel;

/**
 * @brief A functor to get the result once a time which is generated by OBIsomorphismMapper::MapGeneric
 *
 */
class MapperFunctor : public OBIsomorphismMapper::Functor
{
    public:
/**
 * @brief
 *
 * @param data
 */
        MapperFunctor(std::vector<OBIsomorphismMapper::Mapping> &data) {}
        /**
         * @brief
         *
         * @param map
         * @return bool operator
         */
        bool operator()(OBIsomorphismMapper::Mapping &map);
        /**
         * @brief Return the sym_data, which contains all the unique symmetrys.
         *
         * @return std::vector<std::pair<unsigned, unsigned> > &sym_data
         */
        std::vector<std::pair<unsigned, unsigned> > & getSymmetry() { std::sort(sym_data.begin(), sym_data.end()); return sym_data; }
    private:
        // store all unique symmetry in sym_data
        std::vector<std::pair<unsigned, unsigned> > sym_data; /**< TODO Restore all the symmetrys.*/
};

#endif // MAPPERFUNCTOR_H
